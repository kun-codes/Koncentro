name: Build App

on:
    push:
    pull_request:

jobs:
    build:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ ubuntu-22.04, macos-latest, macos-13, windows-latest ]  # using older ubuntu version for compatibility
                # https://nuitka.net/user-documentation/common-issue-solutions.html#linux-standalone
                python-version: [ 3.12 ]

        steps:
            -   name: Checkout
                uses: actions/checkout@v4

            -   name: Set up Python ${{ matrix.python-version }}
                uses: actions/setup-python@v5
                with:
                    python-version: ${{ matrix.python-version }}

            -   name: Store Architecture (Linux and MacOS)
                if: matrix.os == 'ubuntu-22.04' || matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: |
                    ARCHITECTURE=$(uname -m)
                    echo "ARCHITECTURE=$ARCHITECTURE" >> $GITHUB_ENV

            -   name: Store Architecture (Windows)
                if: matrix.os == 'windows-latest'
                run: |
                    echo "ARCHITECTURE=x86_64" >> $env:GITHUB_ENV

            -   name: Get latest mitmproxy release
                id: get_latest_release
                uses: octokit/request-action@v2.x
                with:
                    route: GET /repos/{owner}/{repo}/releases/latest
                    owner: mitmproxy
                    repo: mitmproxy
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            -   name: Set latest version as env variable (Linux and MacOS)
                if: matrix.os == 'ubuntu-22.04' || matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: |
                    # Parse the JSON response to get just the tag_name and remove the 'v' prefix
                    MITMPROXY_LATEST_VERSION=$(echo '${{ steps.get_latest_release.outputs.data }}' | jq -r '.tag_name' | sed 's/^v//')
                    echo "MITMPROXY_LATEST_VERSION=$MITMPROXY_LATEST_VERSION" >> $GITHUB_ENV
                    echo "Latest mitmproxy version: $MITMPROXY_LATEST_VERSION"

            -   name: Set latest version as env variable (Windows)
                if: matrix.os == 'windows-latest'
                run: |
                    # Parse the JSON response to get just the tag_name and remove the 'v' prefix
                    $jsonData = '${{ steps.get_latest_release.outputs.data }}'
                    $version = (ConvertFrom-Json $jsonData).tag_name -replace '^v', ''
                    echo "MITMPROXY_LATEST_VERSION=$version" >> $env:GITHUB_ENV
                    Write-Output "Latest mitmproxy version: $version"

            -   name: Get app version (Linux and MacOS)
                if: matrix.os == 'ubuntu-22.04' || matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: |
                    # Read version from pyproject.toml
                    KONCENTRO_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
                    echo "KONCENTRO_VERSION=$KONCENTRO_VERSION" >> $GITHUB_ENV
                    echo "Koncentro version: $KONCENTRO_VERSION"

            -   name: Get app version (Windows)
                if: matrix.os == 'windows-latest'
                run: |
                    # Read version from pyproject.toml
                    $version = python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])"
                    echo "KONCENTRO_VERSION=$version" >> $env:GITHUB_ENV
                    Write-Output "Koncentro version: $version"

            -   name: Install dependencies
                env:
                    POETRY_VIRTUALENVS_CREATE: false
                run: |
                    python -m pip install --upgrade pip
                    python -m pip install poetry
                    poetry install --no-cache --no-interaction --no-root

            -   name: Debug Packages
                run: |
                    pip list
                    poetry show

            -   name: Download latest version of mitmproxy (Linux and MacOS)
                if: matrix.os == 'ubuntu-22.04' || matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: |
                    cd ..
                    if [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
                        wget https://downloads.mitmproxy.org/${{ env.MITMPROXY_LATEST_VERSION }}/mitmproxy-${{ env.MITMPROXY_LATEST_VERSION }}-linux-x86_64.tar.gz
                        tar -xvf mitmproxy-${{ env.MITMPROXY_LATEST_VERSION }}-linux-x86_64.tar.gz
                        cp mitmdump Koncentro/mitmdump
                    elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
                        curl -LO https://downloads.mitmproxy.org/${{ env.MITMPROXY_LATEST_VERSION }}/mitmproxy-${{ env.MITMPROXY_LATEST_VERSION }}-macos-arm64.tar.gz
                        tar -xvf mitmproxy-${{ env.MITMPROXY_LATEST_VERSION }}-macos-arm64.tar.gz
                        cp mitmproxy.app/Contents/MacOS/mitmdump Koncentro/mitmdump
                    elif [[ "${{ matrix.os }}" == "macos-13" ]]; then
                        curl -LO https://downloads.mitmproxy.org/${{ env.MITMPROXY_LATEST_VERSION }}/mitmproxy-${{ env.MITMPROXY_LATEST_VERSION }}-macos-x86_64.tar.gz
                        tar -xvf mitmproxy-${{ env.MITMPROXY_LATEST_VERSION }}-macos-x86_64.tar.gz
                        cp mitmproxy.app/Contents/MacOS/mitmdump Koncentro/mitmdump
                    fi
                    cd Koncentro

            -   name: Download latest version of mitmproxy (Windows)
                if: matrix.os == 'windows-latest'
                run: |
                    cd ..
                    Invoke-WebRequest -Uri "https://downloads.mitmproxy.org/${{ env.MITMPROXY_LATEST_VERSION }}/mitmproxy-${{ env.MITMPROXY_LATEST_VERSION }}-windows-x86_64.zip" -OutFile "mitmproxy-${{ env.MITMPROXY_LATEST_VERSION }}-windows-x86_64.zip"
                    Expand-Archive -Path "mitmproxy-${{ env.MITMPROXY_LATEST_VERSION }}-windows-x86_64.zip" -DestinationPath .
                    Copy-Item -Path "mitmdump.exe" -Destination "Koncentro\mitmdump.exe"
                    cd "Koncentro"

            # Remove problematic brew libs if Intel Mac
            # https://github.com/Nuitka/Nuitka/issues/2853#issuecomment-2119520735
            -   name: Remove problematic brew libs
                if: matrix.os == 'macos-13'
                run: |
                    brew remove --force --ignore-dependencies openssl@3
                    brew cleanup openssl@3

            -   name: Build Executable (Linux and MacOS)
                if: matrix.os == 'ubuntu-22.04' || matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                uses: Nuitka/Nuitka-Action@main
                with:
                    nuitka-version: 'main'
                    script-name: |
                        src/__main__.py
                    mode: ${{ (matrix.os == 'macos-latest' || matrix.os == 'macos-13') && 'app' || 'standalone' }}
                    enable-plugins: 'pyside6'
                    product-name: "Koncentro"
                    macos-app-icon: 'assets/logo.icns'
                    macos-app-name: 'Koncentro'
                    linux-icon: 'assets/logo.ico'
                    output-file: 'koncentro'
                    macos-app-version: '${{ env.KONCENTRO_VERSION }}'
                    product-version: '${{ env.KONCENTRO_VERSION }}'
                    include-module: |
                        logging.config
                    include-data-files: |
                        ./src/website_blocker/filter.py=./website_blocker/filter.py
                        ./src/constants.py=./constants.py
                        ./pyproject.toml=./pyproject.toml
                        ./mitmdump=./mitmdump
                        ./alembic.ini=./alembic.ini
                        ./src/migrations/*.py=./src/migrations/
                        ./src/migrations/versions/*.py=./src/migrations/versions/

            -   name: Build Executable (Windows)
                if: matrix.os == 'windows-latest'
                uses: Nuitka/Nuitka-Action@main
                with:
                    nuitka-version: 'main'
                    script-name: |
                        src\__main__.py
                    mode: standalone
                    windows-icon-from-ico: 'assets/logo.ico'
                    msvc: 'latest'  # use msvc to avoid false positives in antivirus scans
                    windows-console-mode: 'disable'
                    enable-plugins: 'pyside6'
                    product-name: "Koncentro"
                    output-file: 'koncentro'
                    product-version: '${{ env.KONCENTRO_VERSION }}'
                    include-module: |
                        logging.config
                    nofollow-import-to: |
                        sqlalchemy.dialects.oracle
                    # causes compiler out of heap space errors in github actions
                    include-data-files: |
                        .\src\website_blocker\filter.py=.\website_blocker\filter.py
                        .\src\constants.py=.\constants.py
                        .\pyproject.toml=.\pyproject.toml
                        .\mitmdump.exe=.\mitmdump.exe
                        .\alembic.ini=.\alembic.ini
                        .\src\migrations\*.py=.\src\migrations\
                        .\src\migrations\versions\*.py=.\src\migrations\versions\

            -   name: Install tree (MacOS)
                if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: brew install tree

            -   name: tree command (Linux and MacOS)
                if: matrix.os == 'ubuntu-22.04' || matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: |
                    tree build/

            -   name: tree command (Windows)
                if: matrix.os == 'windows-latest'
                run: |
                    Get-ChildItem -Recurse "build\"

            -   name: Upload artifacts Linux
                if: matrix.os == 'ubuntu-22.04'
                uses: actions/upload-artifact@v4
                with:
                    name: 'linux_${{ env.ARCHITECTURE }}-build'
                    path: 'build/__main__.dist/'
                    include-hidden-files: 'true'

            -   name: Upload artifacts MacOS
                if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                uses: actions/upload-artifact@v4
                with:
                    name: '${{ matrix.os }}_${{ env.ARCHITECTURE }}-build'
                    path: 'build/__main__.app/'
                    include-hidden-files: 'true'

            -   name: Upload artifacts Windows
                if: matrix.os == 'windows-latest'
                uses: actions/upload-artifact@v4
                with:
                    name: '${{ matrix.os }}_${{ env.ARCHITECTURE }}-build'
                    path: 'build\__main__.dist\'
                    include-hidden-files: 'true'
