name: Build Application (Reusable)

on:
    workflow_call:
        inputs:
            deployment:
                description: "Enable deployment mode for Nuitka build"
                required: true
                type: boolean
                default: false
            mitmproxy-version:
                description: "Mitmproxy version to use"
                required: true
                type: string

jobs:
    build:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ ubuntu-22.04, ubuntu-24.04-arm, macos-latest, macos-13, windows-latest ] #  using older x86 ubuntu
                # for compatibility reasons with older Linux distributions
                # https://nuitka.net/user-documentation/common-issue-solutions.html#linux-standalone
                python-version: [ 3.12 ]
                include:
                    - os: ubuntu-22.04
                      architecture: x86_64
                    - os: ubuntu-24.04-arm
                      architecture: aarch64

        steps:
            -   name: Checkout
                uses: actions/checkout@v4

            -   name: Set up Python ${{ matrix.python-version }}
                uses: actions/setup-python@v5
                with:
                    python-version: ${{ matrix.python-version }}

            -   name: Store Architecture (Linux and MacOS)
                if: matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-24.04-arm' || matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: |
                    if [ "${{ matrix.architecture }}" != "" ]; then
                        echo "ARCHITECTURE=${{ matrix.architecture }}" >> $GITHUB_ENV
                    else
                        ARCHITECTURE=$(uname -m)
                        echo "ARCHITECTURE=$ARCHITECTURE" >> $GITHUB_ENV
                    fi

            -   name: Store Architecture (Windows)
                if: matrix.os == 'windows-latest'
                run: |
                    echo "ARCHITECTURE=x86_64" >> $env:GITHUB_ENV

            -   name: Set mitmproxy version as env variable (Linux and MacOS)
                if: matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-24.04-arm' || matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: |
                    echo "MITMPROXY_LATEST_VERSION=${{ inputs.mitmproxy-version }}" >> $GITHUB_ENV
                    echo "Latest mitmproxy version: ${{ inputs.mitmproxy-version }}"

            -   name: Set mitmproxy version as env variable (Windows)
                if: matrix.os == 'windows-latest'
                run: |
                    echo "MITMPROXY_LATEST_VERSION=${{ inputs.mitmproxy-version }}" >> $env:GITHUB_ENV
                    Write-Output "Latest mitmproxy version: ${{ inputs.mitmproxy-version }}"

            -   name: Get app version (Linux and MacOS)
                if: matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-24.04-arm' || matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: |
                    # Read version from pyproject.toml
                    KONCENTRO_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
                    echo "KONCENTRO_VERSION=$KONCENTRO_VERSION" >> $GITHUB_ENV
                    echo "Koncentro version: $KONCENTRO_VERSION"

            -   name: Get app version (Windows)
                if: matrix.os == 'windows-latest'
                run: |
                    # Read version from pyproject.toml
                    $version = python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])"
                    echo "KONCENTRO_VERSION=$version" >> $env:GITHUB_ENV
                    Write-Output "Koncentro version: $version"

            -   name: Install dependencies
                env:
                    POETRY_VIRTUALENVS_CREATE: false
                run: |
                    python -m pip install --upgrade pip
                    python -m pip install poetry
                    poetry install --no-cache --no-interaction --no-root

            -   name: Debug Packages
                run: |
                    pip list
                    poetry show

            # Remove problematic brew libs if Intel Mac
            # https://github.com/Nuitka/Nuitka/issues/2853#issuecomment-2119520735
            -   name: Remove problematic brew libs
                if: matrix.os == 'macos-13'
                run: |
                    brew remove --force --ignore-dependencies openssl@3
                    brew cleanup openssl@3

            -   name: Generate Python RC files
                shell: bash
                run: |
                    dev/generate-python-rc-files.sh

            -   name: Debug pwd
                shell: bash
                run: |
                    pwd
                    ls -la

            -   name: Clone Mitmproxy Repository
                uses: actions/checkout@v4
                with:
                    repository: mitmproxy/mitmproxy
                    fetch-depth: '0'
                    path: mitmproxy
                    ref: 'v${{ inputs.mitmproxy-version }}'

            -   name: Debug pwd
                shell: bash
                run: |
                    pwd
                    ls -la

            -   name: Build Executable (All Platforms)
                uses: Nuitka/Nuitka-Action@main
                with:
                    nuitka-version: 'main'
                    script-name: |
                        src/koncentro.py
                        mitmproxy/release/specs/mitmdump
                    mode: ${{ (matrix.os == 'macos-latest' || matrix.os == 'macos-13') && 'app' || 'standalone' }}
                    enable-plugins: 'pyside6'
                    product-name: 'Koncentro'
                    file-description: 'Koncentro'
                    macos-app-icon: 'assets/logo.icns'
                    macos-app-name: 'Koncentro'
                    linux-icon: 'assets/logo.ico'
                    windows-icon-from-ico: 'assets/logo.ico'
                    clang: ${{ matrix.os == 'windows-latest' && 'on' || '' }}
                    windows-console-mode: 'disable'
                    output-file: 'koncentro'
                    macos-app-version: '${{ env.KONCENTRO_VERSION }}'
                    product-version: '${{ env.KONCENTRO_VERSION }}'
                    deployment: ${{ inputs.deployment }}
                    include-module: |
                        logging.config
                        ${{ (matrix.os == 'macos-latest' || matrix.os == 'macos-13') && 'mitmproxy_macos' || '' }}
                        ${{ (matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-24.04-arm') && 'mitmproxy_linux' || '' }}
                        ${{ matrix.os == 'windows-latest' && 'mitmproxy_windows' || '' }}
                    nofollow-import-to: |
                        sqlalchemy.dialects.oracle
                        sqlalchemy.dialects.mssql
                        sqlalchemy.dialects.mysql
                        mitmproxy.tools.web
                        mitmproxy.tools.console
                    include-data-files: |
                        ./src/website_blocker/block.py=./website_blocker/block.py
                        ./src/website_blocker/constants.py=./website_blocker/constants.py
                        ./alembic.ini=./alembic.ini
                        ./src/migrations/*.py=./src/migrations/
                        ./src/migrations/versions/*.py=./src/migrations/versions/
                        ./LICENSE=./LICENSE

            -   name: Symlink Koncentro to Mitmdump target (Linux and MacOS)
                if: matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-24.04-arm' || matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: |
                    ln -s "build/koncentro.dist/koncentro" "build/koncentro.dist/mitmdump"

            -   name: Symlink Koncentro to Mitmdump target (Windows)
                if: matrix.os == 'windows-latest'
                run: |
                    New-Item -ItemType SymbolicLink -Path "build\koncentro.dist\mitmdump.exe" -Target "build\koncentro.dist\koncentro.exe"

            -   name: Install tree (MacOS)
                if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: brew install tree

            -   name: tree command (Linux and MacOS)
                if: matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-24.04-arm' || matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: |
                    tree build/

            -   name: tree command (Windows)
                if: matrix.os == 'windows-latest'
                run: |
                    Get-ChildItem -Recurse "build\"

            -   name: Move .app to dist folder with correct name (MacOS)
                if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: |
                    mkdir -p dist/
                    mv build/koncentro.app dist/Koncentro.app

            -   name: tree command (MacOS)
                if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: |
                    tree dist/

            -   name: Upload artifacts Linux
                if: matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-24.04-arm'
                uses: actions/upload-artifact@v4
                with:
                    name: 'Linux_${{ env.ARCHITECTURE }}-build'
                    path: 'build/koncentro.dist/'
                    include-hidden-files: 'true'

            -   name: Upload artifacts MacOS
                if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                uses: actions/upload-artifact@v4
                with:
                    name: 'macOS_${{ env.ARCHITECTURE }}-build'
                    path: 'dist'
                    include-hidden-files: 'true'

            -   name: Upload artifacts Windows
                if: matrix.os == 'windows-latest'
                uses: actions/upload-artifact@v4
                with:
                    name: 'Windows_${{ env.ARCHITECTURE }}-build'
                    path: 'build\koncentro.dist\'
                    include-hidden-files: 'true'
